@model IQueryable<Location>

@{
    ViewData["Title"] = "Места расположения";
}

<h1>@ViewData["Title"]</h1>

<table id="locations_table" class="table table-striped">
    <thead>
    <tr>
        <th>
            <a href="#" data-sort-by="name" data-sort-direction="desc">Название</a>
        </th>
        <th>
            <a href="#" data-sort-by="city" data-sort-direction="desc">Город</a>
        </th>
        <th>
            <a href="#" data-sort-by="address" data-sort-direction="desc">Адрес</a>
        </th>
        <th>
            <a href="#" data-sort-by="type" data-sort-direction="desc">Тип</a>
        </th>
        <th>
            <a href="#" data-sort-by="capacity" data-sort-direction="desc">Вместимость</a>
        </th>
        <th>Действия</th>
    </tr>
    </thead>
    <tbody>
    @await Html.PartialAsync("_LocationTable", Model)
    </tbody>
</table>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function() {
        // Назначаем обработчик события клика на заголовки столбцов
        $("#locations_table th a").on("click", handleSortClick);
    });

    // Функция для обновления данных таблицы через AJAX
    function refreshTableData(sortBy, sortDirection) {
        $.ajax({
            url: "@Url.Action("GetSortedData", "Locations")",
            type: "GET",
            data: {
                sortBy: sortBy,
                sortDirection: sortDirection
            },
            success: function(data) {
                $("#locations_table tbody").html(data);
            },
            error: function() {
                alert("Произошла ошибка при обновлении данных.");
            }
        });
    }

    // Функция для обработки события клика на заголовке столбца
    function handleSortClick(event) {
        event.preventDefault();
        
        // Удаляем классы сортировки у всех столбцов
        $("#locations_table th a").removeClass("active-sort");

        var sortBy = $(this).data("sort-by");
        var currentSortDirection = $(this).data("sort-direction");
        
        // Устанавливаем класс сортировки для текущего столбца
        $(this).addClass("active-sort");

        // Меняем направление сортировки
        var newSortDirection = currentSortDirection === "asc" ? "desc" : "asc";

        // Обновляем данные таблицы через AJAX
        refreshTableData(sortBy, newSortDirection);

        // Обновляем значения атрибутов data-sort-direction
        $(this).data("sort-direction", newSortDirection);
    }

    // Функция для удаления записи по идентификатору
    function deleteLocation(locationId) {
        if (confirm("Вы уверены, что хотите удалить эту запись?")) {
            $.ajax({
                url: "@Url.Action("DeleteLocation", "Locations")",
                type: "POST",
                data: { id: locationId },
                success: function() {
                    // Получаем текущие значения сортировки
                    var currentSortColumn = $("#locations_table th a.active-sort");
                    var sortBy = currentSortColumn.data("sort-by");
                    var sortDirection = currentSortColumn.data("sort-direction");
    
                    // Обновляем данные таблицы через AJAX с текущими значениями сортировки
                    refreshTableData(sortBy, sortDirection);
    
                    alert("Запись успешно удалена.");
                },
                error: function() {
                    alert("Произошла ошибка при удалении записи.");
                }
            });
        }
    }
    
    // Функция для изменения записи по идентификатору
    function editLocation(locationId) {
        // Здесь можно выполнить дополнительные действия для редактирования записи
        // например, перенаправить пользователя на страницу редактирования
        // или показать модальное окно с формой редактирования
        alert("Вызвано редактирование записи.");
    }
</script>